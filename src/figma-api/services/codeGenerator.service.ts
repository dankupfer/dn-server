// // src/figma-api/services/codeGenerator.service.js
// const propertyMapper = require('./propertyMapper.service');
// const validator = require('./validator.service');

// class CodeGeneratorService {
//     /**
//      * Generate module index.tsx file content
//      * @param {string} moduleName - PascalCase module name (e.g., 'SaveInvest')
//      * @param {string} moduleId - kebab-case module ID (e.g., 'save-invest')
//      * @returns {string} - TypeScript code for index.tsx
//      */
//     generateModuleIndex(moduleName, moduleId) {
//         return `// Generated by DN Figma Bridge
// import React from 'react';
// import { ScreenBuilder, type ScreenConfig } from '@dankupfer/dn-components';
// import screenData from './screenData.json';

// interface ${moduleName}Props {
//   screenWidth: number;
// }

// const ${moduleName}: React.FC<${moduleName}Props> = ({ screenWidth }) => {
//   const config = screenData as ScreenConfig;
  
//   return (
//     <ScreenBuilder 
//       config={config} 
//       screenWidth={screenWidth} 
//     />
//   );
// };

// export default ${moduleName};
// `;
//     }

//     /**
//      * Generate screenData.json file content
//      * @param {Object} screenData - Screen data object
//      * @returns {string} - Formatted JSON string
//      */
//     generateScreenData(screenData) {
//         // Validate before generating
//         const validation = validator.validateScreenData(screenData);
//         if (!validation.valid) {
//             throw new Error(`Invalid screenData: ${validation.errors.join(', ')}`);
//         }

//         return JSON.stringify(screenData, null, 2);
//     }

//     /**
//      * Generate component configuration for screenData
//      * @param {string} componentType - Component type (e.g., 'AccountCard')
//      * @param {Object} properties - Component properties (semantic names)
//      * @param {Object} style - Optional style object
//      * @returns {Object} - Component configuration for screenData
//      */
//     generateComponentConfig(componentType, properties, style = {}) {
//         // Validate component
//         const validation = validator.validateComponent(componentType, properties);
//         if (!validation.valid) {
//             throw new Error(`Invalid component: ${validation.errors.join(', ')}`);
//         }

//         const config = {
//             type: componentType,
//             props: {
//                 id: properties.id || `${componentType.toLowerCase()}-${Date.now()}`,
//                 ...properties
//             }
//         };

//         // Add style if provided
//         if (Object.keys(style).length > 0) {
//             config.style = style;
//         }

//         return config;
//     }

//     /**
//      * Generate complete screenData from component list
//      * @param {Array} components - Array of component configurations
//      * @param {boolean} scrollable - Whether screen is scrollable
//      * @param {Object} screenStyle - Optional screen-level style
//      * @returns {Object} - Complete screenData object
//      */
//     generateCompleteScreenData(components, scrollable = true, screenStyle = {}) {
//         const screenData = {
//             scrollable,
//             components
//         };

//         // Add screen style if provided
//         if (Object.keys(screenStyle).length > 0) {
//             screenData.style = screenStyle;
//         }

//         return screenData;
//     }

//     /**
//      * Generate route configuration entry
//      * @param {string} moduleId - Module ID (kebab-case)
//      * @param {string} moduleName - Module name (PascalCase)
//      * @param {string} displayName - Human-readable display name
//      * @returns {string} - Route configuration line
//      */
//     generateRouteEntry(moduleId, moduleName, displayName) {
//         return `  { id: '${moduleId}', name: '${displayName}', component: ${moduleName} },`;
//     }

//     /**
//      * Generate import statement
//      * @param {string} moduleName - Module name (PascalCase)
//      * @param {string} moduleId - Module ID (kebab-case)
//      * @returns {string} - Import statement
//      */
//     generateImportStatement(moduleName, moduleId) {
//         return `import ${moduleName} from '../../feature/${moduleId}';`;
//     }

//     /**
//      * Convert kebab-case to PascalCase
//      * @param {string} str - kebab-case string
//      * @returns {string} - PascalCase string
//      */
//     toPascalCase(str) {
//         return str
//             .split('-')
//             .map(word => word.charAt(0).toUpperCase() + word.slice(1))
//             .join('');
//     }

//     /**
//      * Convert PascalCase to kebab-case
//      * @param {string} str - PascalCase string
//      * @returns {string} - kebab-case string
//      */
//     toKebabCase(str) {
//         return str
//             .replace(/([a-z])([A-Z])/g, '$1-$2')
//             .toLowerCase();
//     }

//     /**
//      * Generate display name from module ID
//      * @param {string} moduleId - Module ID (kebab-case)
//      * @returns {string} - Display name (Title Case)
//      */
//     generateDisplayName(moduleId) {
//         return moduleId
//             .split('-')
//             .map(word => word.charAt(0).toUpperCase() + word.slice(1))
//             .join(' ');
//     }

//     /**
//      * Convert generic properties to semantic for code generation
//      * @param {string} componentType - Component type
//      * @param {Object} genericProps - Generic properties (prop0, prop1, etc.)
//      * @returns {Object} - Semantic properties
//      */
//     convertPropsForGeneration(componentType, genericProps) {
//         return propertyMapper.mapProperties(componentType, genericProps);
//     }

//     /**
//      * Generate complete module files
//      * @param {string} moduleName - Module name (PascalCase)
//      * @param {string} moduleId - Module ID (kebab-case)
//      * @param {Object} screenData - Screen data object
//      * @returns {Object} - { indexContent, screenDataContent }
//      */
//     generateModuleFiles(moduleName, moduleId, screenData) {
//         return {
//             indexContent: this.generateModuleIndex(moduleName, moduleId),
//             screenDataContent: this.generateScreenData(screenData)
//         };
//     }

//     /**
//      * Validate and prepare module for generation
//      * @param {Object} request - Module generation request
//      * @returns {Object} - { valid: boolean, errors: string[], prepared: Object }
//      */
//     prepareModuleGeneration(request) {
//         // Validate the request
//         const validation = validator.validateModuleRequest(request);

//         if (!validation.valid) {
//             return {
//                 valid: false,
//                 errors: validation.errors
//             };
//         }

//         // Prepare the module
//         const { moduleName, moduleId, screenData } = request;
//         const files = this.generateModuleFiles(moduleName, moduleId, screenData);

//         return {
//             valid: true,
//             errors: [],
//             prepared: {
//                 moduleName,
//                 moduleId,
//                 files
//             }
//         };
//     }
// }

// // Export singleton instance
// module.exports = new CodeGeneratorService();